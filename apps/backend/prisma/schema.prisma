// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String @id @default(uuid())
  username String @unique
  email    String @unique
  password String
  // TODO: Github necessary fields

  roles          Role[]       @default([USER])
  courses        UserCourse[]
  createdCourses Course[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  USER
  ADMIN
  DESIGNER
}

model Course {
  id          String   @id @default(uuid())
  name        String
  description String?
  tags        String[]

  userId    String
  createdBy User   @relation(fields: [userId], references: [id])

  lessons Lesson[]
  users   UserCourse[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Lesson {
  id    String @id @default(uuid())
  name  String
  order Int

  courseId String
  course   Course @relation(fields: [courseId], references: [id])

  chapters Chapter[]
  progress Progress[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Progress {
  id             String @id @default(uuid())
  donePercentage Int

  lessonId     String
  lesson       Lesson     @relation(fields: [lessonId], references: [id])
  userCourseId String
  userCourse   UserCourse @relation(fields: [userCourseId], references: [id])
}

model Chapter {
  id   String @id @default(uuid())
  type Type

  text     TextChapter?
  question QuestionChapter?
  code     CodeChapter?

  lessonId String
  lesson   Lesson @relation(fields: [lessonId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Type {
  TEXT
  QUESTION
  CODE
}

model TextChapter {
  id   String @id @default(uuid())
  text String

  chapterId String  @unique
  chapter   Chapter @relation(fields: [chapterId], references: [id])
}

model QuestionChapter {
  id           String   @id @default(uuid())
  question     String
  alternatives String[]
  correct      Int

  chapterId String  @unique
  chapter   Chapter @relation(fields: [chapterId], references: [id])
}

model CodeChapter {
  id       String   @id @default(uuid())
  text     String
  filename String
  snippet  String
  answers  String[]

  chapterId String  @unique
  chapter   Chapter @relation(fields: [chapterId], references: [id])
}

model UserCourse {
  id       String @id @default(uuid())
  userId   String
  courseId String

  user   User   @relation(fields: [userId], references: [id])
  course Course @relation(fields: [courseId], references: [id])

  lessonProgress Progress[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, courseId])
}
